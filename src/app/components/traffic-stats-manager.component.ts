import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { TrafficStatsService } from '../services/traffic-stats.service';
import { TrafficStat, CreateTrafficStatRequest } from '../types/traffic-stat.interface';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-traffic-stats-manager',
  standalone: true,
  imports: [CommonModule, FormsModule, ReactiveFormsModule],
  template: `
    <div class="container">
      <h1>VPN Traffic Statistics Generator</h1>

      <!-- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ—Å–µ—Ç–æ–≤ -->
      <div class="form-section generator-section">
        <h2>üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ—Å–µ—Ç–æ–≤</h2>
        <form [formGroup]="generatorForm" class="generator-form">
          <div class="generator-row">
            <div class="form-group">
              <label for="totalLeadsMin">–õ–∏–¥—ã (–º–∏–Ω):</label>
              <input
                type="number"
                id="totalLeadsMin"
                formControlName="totalLeadsMin"
                class="form-control"
                min="1"
                placeholder="10"
              >
            </div>
            <div class="form-group">
              <label for="totalLeadsMax">–õ–∏–¥—ã (–º–∞–∫—Å):</label>
              <input
                type="number"
                id="totalLeadsMax"
                formControlName="totalLeadsMax"
                class="form-control"
                min="1"
                placeholder="100"
              >
            </div>
          </div>

          <div class="generator-row">
            <div class="form-group">
              <label for="advertisersCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π:</label>
              <input
                type="number"
                id="advertisersCount"
                formControlName="advertisersCount"
                class="form-control"
                min="1"
                max="20"
                placeholder="5"
              >
            </div>
          </div>

          <div class="generator-row">
            <div class="form-group">
              <label for="conversionMin">–ö–æ–Ω–≤–µ—Ä—Å–∏—è % (–º–∏–Ω):</label>
              <input
                type="number"
                id="conversionMin"
                formControlName="conversionMin"
                class="form-control"
                min="0"
                max="100"
                step="0.1"
                placeholder="5"
              >
            </div>
            <div class="form-group">
              <label for="conversionMax">–ö–æ–Ω–≤–µ—Ä—Å–∏—è % (–º–∞–∫—Å):</label>
              <input
                type="number"
                id="conversionMax"
                formControlName="conversionMax"
                class="form-control"
                min="0"
                max="100"
                step="0.1"
                placeholder="25"
              >
            </div>
          </div>

          <div class="generator-row">
            <div class="form-group checkbox-group">
              <label class="checkbox-label">
                <input
                  type="checkbox"
                  formControlName="includeNoobs"
                  class="checkbox-input"
                >
                <span class="checkbox-text">–î–æ–±–∞–≤–∏—Ç—å –Ω—É–±–∞ (0% –∫–æ–Ω–≤–µ—Ä—Å–∏—è) ü§°</span>
              </label>
            </div>
          </div>

          <div class="generator-controls">
            <button type="button" (click)="generatePreset()" class="btn btn-primary btn-large">
              üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ—Å–µ—Ç
            </button>
            <button type="button" (click)="clearAll()" class="btn btn-warning">
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
            </button>
          </div>
        </form>
      </div>

      <!-- –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ -->
      <div class="form-section">
        <h2>–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è</h2>
        <form [formGroup]="statForm" (ngSubmit)="onSubmit()" class="stat-form">
          <div class="form-group">
            <label for="name">–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è:</label>
            <input
              type="text"
              id="name"
              formControlName="name"
              class="form-control"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: AAA, BBB"
            >
            <div *ngIf="statForm.get('name')?.invalid && statForm.get('name')?.touched" class="error">
              –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
            </div>
          </div>

          <div class="form-group">
            <label for="origin">Origin (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
            <input
              type="text"
              id="origin"
              formControlName="origin"
              class="form-control"
              placeholder="–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞"
            >
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="successful_leads">–£—Å–ø–µ—à–Ω—ã–µ –ª–∏–¥—ã:</label>
              <input
                type="number"
                id="successful_leads"
                formControlName="successful_leads"
                class="form-control"
                min="0"
              >
              <small class="form-text">–ë—É–¥–µ—Ç —Ä–∞–≤–Ω–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∏–¥–æ–≤</small>
            </div>

            <div class="form-group">
              <label for="total_ftds">–í—Å–µ–≥–æ FTD:</label>
              <input
                type="number"
                id="total_ftds"
                formControlName="total_ftds"
                class="form-control"
                min="0"
              >
            </div>
          </div>

          <div class="info-text">
            <p><strong>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è:</strong></p>
            <ul>
              <li>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ = –£—Å–ø–µ—à–Ω—ã–µ –ª–∏–¥—ã</li>
              <li>–ü–æ–∑–¥–Ω–∏–µ FTD = 0</li>
              <li>–î–æ—Ö–æ–¥ = 0</li>
              <li>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
            </ul>
          </div>

          <div class="button-group">
            <button type="submit" [disabled]="statForm.invalid" class="btn btn-primary">
              –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è
            </button>
            <button type="button" (click)="addNoob()" class="btn btn-secondary">
              –î–æ–±–∞–≤–∏—Ç—å –Ω—É–±–∞ ü§°
            </button>
          </div>
        </form>
      </div>

      <!-- –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ -->
      <div class="stats-section">
        <h2>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
        <div class="table-container">
          <table class="stats-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                <th>Origin</th>
                <th>–£—Å–ø–µ—à–Ω—ã–µ –ª–∏–¥—ã</th>
                <th>–í—Å–µ–≥–æ –ª–∏–¥–æ–≤</th>
                <th>FTD</th>
                <th>–ü–æ–∑–¥–Ω–∏–µ FTD</th>
                <th>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏</th>
                <th>–î–æ—Ö–æ–¥</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              <tr *ngFor="let stat of trafficStats$ | async; trackBy: trackByStat">
                <!-- –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π ID -->
                <td>
                  <input
                    type="number"
                    [value]="stat.id"
                    (blur)="updateStatField(stat.id, 'id', $event)"
                    (keydown.enter)="$event.target.blur()"
                    class="editable-input id-input"
                    min="1"
                  >
                </td>

                <!-- –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ -->
                <td>
                  <input
                    type="text"
                    [value]="stat.name"
                    (blur)="updateStatField(stat.id, 'name', $event)"
                    (keydown.enter)="$event.target.blur()"
                    class="editable-input name-input"
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
                  >
                </td>

                <!-- Origin (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π) -->
                <td>{{ stat.origin || 'null' }}</td>

                <!-- –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —É—Å–ø–µ—à–Ω—ã–µ –ª–∏–¥—ã -->
                <td>
                  <input
                    type="number"
                    [value]="stat.successful_leads"
                    (blur)="updateStatField(stat.id, 'successful_leads', $event)"
                    (keydown.enter)="$event.target.blur()"
                    class="editable-input number-input"
                    min="0"
                  >
                </td>

                <!-- –í—Å–µ–≥–æ –ª–∏–¥–æ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ = —É—Å–ø–µ—à–Ω—ã–º –ª–∏–¥–∞–º) -->
                <td>{{ stat.total_leads }}</td>

                <!-- –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ FTD -->
                <td>
                  <input
                    type="number"
                    [value]="stat.total_ftds"
                    (blur)="updateStatField(stat.id, 'total_ftds', $event)"
                    (keydown.enter)="$event.target.blur()"
                    class="editable-input number-input"
                    min="0"
                  >
                </td>

                <!-- –ü–æ–∑–¥–Ω–∏–µ FTD (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π) -->
                <td>{{ stat.late_total_ftds }}</td>

                <!-- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π) -->
                <td class="conversion-cell">{{ stat.conversion_ratio }}</td>

                <!-- –î–æ—Ö–æ–¥ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π) -->
                <td>{{ stat.revenue }}</td>

                <!-- –î–µ–π—Å—Ç–≤–∏—è -->
                <td>
                  <button (click)="deleteStat(stat.id)" class="btn btn-danger btn-sm">
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

      <!-- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —ç–∫—Å–ø–æ—Ä—Ç JSON -->
      <div class="json-section">
        <h2>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON</h2>
        <div class="json-controls">
          <button (click)="generateJson()" class="btn btn-success">
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JSON
          </button>
          <button (click)="copyToClipboard()" class="btn btn-secondary">
            –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä
          </button>
          <button (click)="clearAll()" class="btn btn-warning">
            –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
          </button>
        </div>

        <div class="json-output">
          <h3>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON:</h3>
          <pre class="json-display">{{ generatedJson }}</pre>
        </div>
      </div>

      <!-- –ò–º–ø–æ—Ä—Ç JSON -->
      <div class="import-section">
        <h2>–ò–º–ø–æ—Ä—Ç JSON</h2>
        <textarea
          [(ngModel)]="importJson"
          placeholder="–í—Å—Ç–∞–≤—å—Ç–µ JSON –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞..."
          class="import-textarea"
        ></textarea>
        <button (click)="importFromJson()" class="btn btn-info">
          –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å JSON
        </button>
        <div *ngIf="importMessage" class="import-message" [class.success]="importSuccess" [class.error]="!importSuccess">
          {{ importMessage }}
        </div>
      </div>
    </div>
  `,
  styles: [`
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      font-family: Arial, sans-serif;
    }

    h1, h2 {
      color: #333;
      margin-bottom: 20px;
    }

    .form-section, .stats-section, .json-section, .import-section {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 30px;
      border: 1px solid #e9ecef;
    }

    .generator-section {
      background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
      border: 2px solid #2196f3;
    }

    .generator-section h2 {
      color: #1976d2;
      font-size: 24px;
    }

    .generator-form {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .generator-row {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      align-items: end;
    }

    .generator-row:last-of-type {
      grid-template-columns: 1fr;
    }

    .checkbox-group {
      display: flex;
      align-items: center;
      margin-top: 10px;
    }

    .checkbox-label {
      display: flex;
      align-items: center;
      cursor: pointer;
      font-weight: bold;
      color: #495057;
    }

    .checkbox-input {
      margin-right: 10px;
      transform: scale(1.2);
    }

    .checkbox-text {
      font-size: 16px;
    }

    .generator-controls {
      display: flex;
      gap: 15px;
      margin-top: 20px;
    }

    .btn-large {
      font-size: 16px;
      padding: 15px 30px;
      font-weight: bold;
    }

    .stat-form {
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    .form-row {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 15px;
    }

    .form-group {
      display: flex;
      flex-direction: column;
    }

    .form-group label {
      font-weight: bold;
      margin-bottom: 5px;
      color: #495057;
    }

    .form-control {
      padding: 10px;
      border: 1px solid #ced4da;
      border-radius: 4px;
      font-size: 14px;
    }

    .form-control:focus {
      outline: none;
      border-color: #007bff;
      box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
    }

    .form-text {
      font-size: 12px;
      color: #6c757d;
      margin-top: 5px;
    }

    .button-group {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .button-group .btn {
      flex: 1;
      min-width: 200px;
    }

    .info-text {
      background-color: #e7f3ff;
      border: 1px solid #b3d9ff;
      border-radius: 4px;
      padding: 15px;
      margin: 15px 0;
    }

    .info-text p {
      margin: 0 0 10px 0;
      font-weight: bold;
      color: #0066cc;
    }

    .info-text ul {
      margin: 0;
      padding-left: 20px;
    }

    .info-text li {
      color: #495057;
      margin-bottom: 5px;
    }

    .error {
      color: #dc3545;
      font-size: 12px;
      margin-top: 5px;
    }

    .btn {
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      transition: background-color 0.2s;
    }

    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    .btn-primary {
      background-color: #007bff;
      color: white;
    }

    .btn-primary:hover:not(:disabled) {
      background-color: #0056b3;
    }

    .btn-success {
      background-color: #28a745;
      color: white;
    }

    .btn-success:hover {
      background-color: #1e7e34;
    }

    .btn-secondary {
      background-color: #6c757d;
      color: white;
    }

    .btn-secondary:hover {
      background-color: #545b62;
    }

    .btn-warning {
      background-color: #ffc107;
      color: #212529;
    }

    .btn-warning:hover {
      background-color: #e0a800;
    }

    .btn-danger {
      background-color: #dc3545;
      color: white;
    }

    .btn-danger:hover {
      background-color: #c82333;
    }

    .btn-info {
      background-color: #17a2b8;
      color: white;
    }

    .btn-info:hover {
      background-color: #138496;
    }

    .btn-sm {
      padding: 5px 10px;
      font-size: 12px;
    }

    .table-container {
      overflow-x: auto;
    }

    .stats-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 10px;
    }

    .stats-table th,
    .stats-table td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #dee2e6;
    }

    .stats-table th {
      background-color: #e9ecef;
      font-weight: bold;
      color: #495057;
    }

    .stats-table tbody tr:hover {
      background-color: #f5f5f5;
    }

    .editable-input {
      width: 100%;
      border: 1px solid transparent;
      background: transparent;
      padding: 4px 8px;
      font-family: inherit;
      font-size: inherit;
      border-radius: 3px;
      transition: all 0.2s ease;
    }

    .editable-input:hover {
      border-color: #ced4da;
      background-color: #f8f9fa;
    }

    .editable-input:focus {
      outline: none;
      border-color: #007bff;
      background-color: white;
      box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
    }

    .id-input {
      width: 80px;
      text-align: center;
    }

    .name-input {
      min-width: 100px;
    }

    .number-input {
      width: 70px;
      text-align: center;
    }

    .conversion-cell {
      font-weight: bold;
      color: #28a745;
      background-color: #f8fff9;
    }

    .json-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }

    .json-output {
      margin-top: 20px;
    }

    .json-display {
      background-color: #f8f9fa;
      border: 1px solid #e9ecef;
      border-radius: 4px;
      padding: 15px;
      overflow-x: auto;
      font-family: 'Courier New', monospace;
      font-size: 13px;
      line-height: 1.4;
      max-height: 400px;
      overflow-y: auto;
    }

    .import-textarea {
      width: 100%;
      min-height: 150px;
      padding: 15px;
      border: 1px solid #ced4da;
      border-radius: 4px;
      font-family: 'Courier New', monospace;
      font-size: 13px;
      margin-bottom: 10px;
      resize: vertical;
    }

    .import-message {
      margin-top: 10px;
      padding: 10px;
      border-radius: 4px;
    }

    .import-message.success {
      background-color: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }

    .import-message.error {
      background-color: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }

    @media (max-width: 768px) {
      .container {
        padding: 10px;
      }

      .form-row, .generator-row {
        grid-template-columns: 1fr;
      }

      .json-controls {
        flex-direction: column;
      }

      .btn {
        width: 100%;
      }

      .button-group, .generator-controls {
        flex-direction: column;
      }

      .button-group .btn {
        min-width: auto;
        width: 100%;
      }
    }
  `]
})
export class TrafficStatsManagerComponent implements OnInit {
  statForm: FormGroup;
  generatorForm: FormGroup;
  trafficStats$: Observable<TrafficStat[]>;
  generatedJson: string = '';
  importJson: string = '';
  importMessage: string = '';
  importSuccess: boolean = false;

  private advertiserNames = [
    'ALPHA', 'BETA', 'GAMMA', 'DELTA', 'EPSILON', 'ZETA', 'ETA', 'THETA',
    'IOTA', 'KAPPA', 'LAMBDA', 'MU', 'NU', 'XI', 'OMICRON', 'PI',
    'RHO', 'SIGMA', 'TAU', 'UPSILON', 'PHI', 'CHI', 'PSI', 'OMEGA',
    'APEX', 'VERTEX', 'MATRIX', 'NEXUS', 'PRISM', 'QUANTUM', 'VORTEX'
  ];

  constructor(
    private fb: FormBuilder,
    private trafficStatsService: TrafficStatsService
  ) {
    this.statForm = this.fb.group({
      name: ['', [Validators.required]],
      origin: [''],
      successful_leads: [0, [Validators.required, Validators.min(0)]],
      total_ftds: [0, [Validators.required, Validators.min(0)]]
    });

    this.generatorForm = this.fb.group({
      totalLeadsMin: [10, [Validators.required, Validators.min(1)]],
      totalLeadsMax: [100, [Validators.required, Validators.min(1)]],
      advertisersCount: [5, [Validators.required, Validators.min(1), Validators.max(20)]],
      conversionMin: [5, [Validators.required, Validators.min(0), Validators.max(100)]],
      conversionMax: [25, [Validators.required, Validators.min(0), Validators.max(100)]],
      includeNoobs: [false]
    });

    this.trafficStats$ = this.trafficStatsService.getTrafficStats();
  }

  ngOnInit(): void {
    this.generateJson();
  }

  generatePreset(): void {
    if (this.generatorForm.invalid) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      return;
    }

    const formValue = this.generatorForm.value;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    if (formValue.totalLeadsMin > formValue.totalLeadsMax) {
      alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ');
      return;
    }

    if (formValue.conversionMin > formValue.conversionMax) {
      alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π');
      return;
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.trafficStatsService.clearAllStats();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π
    const usedNames = new Set<string>();
    const advertisersToGenerate = formValue.includeNoobs ?
      Math.max(1, formValue.advertisersCount - 1) : // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –Ω—É–±–∞
      formValue.advertisersCount;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π
    for (let i = 0; i < advertisersToGenerate; i++) {
      const name = this.getRandomAdvertiserName(usedNames);
      usedNames.add(name);

      const leads = this.getRandomInt(formValue.totalLeadsMin, formValue.totalLeadsMax);
      const conversionPercent = this.getRandomFloat(formValue.conversionMin, formValue.conversionMax);
      const ftds = Math.floor(leads * (conversionPercent / 100));

      const request: CreateTrafficStatRequest = {
        name: name,
        origin: null,
        successful_leads: leads,
        total_leads: leads,
        total_ftds: ftds,
        late_total_ftds: 0,
        revenue: 0
      };

      this.trafficStatsService.addTrafficStat(request);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω–æ–≥–æ –Ω—É–±–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (formValue.includeNoobs) {
      this.addSingleNoob(usedNames);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º JSON
    this.generateJson();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const message = `üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ—Å–µ—Ç:\n` +
      `‚Ä¢ ${formValue.advertisersCount} —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π\n` +
      `‚Ä¢ –õ–∏–¥—ã: ${formValue.totalLeadsMin}-${formValue.totalLeadsMax}\n` +
      `‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${formValue.conversionMin}%-${formValue.conversionMax}%\n` +
      `${formValue.includeNoobs ? '‚Ä¢ –í–∫–ª—é—á–µ–Ω –æ–¥–∏–Ω –Ω—É–± (6-9 –ª–∏–¥–æ–≤, 0% –∫–æ–Ω–≤–µ—Ä—Å–∏—è) ü§°' : ''}`;

    alert(message);
  }

  private getRandomAdvertiserName(usedNames: Set<string>): string {
    const availableNames = this.advertiserNames.filter(name => !usedNames.has(name));
    if (availableNames.length === 0) {
      // –ï—Å–ª–∏ –≤—Å–µ –∏–º–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ
      return `ADV_${Math.random().toString(36).substr(2, 3).toUpperCase()}`;
    }
    return availableNames[Math.floor(Math.random() * availableNames.length)];
  }

  private addSingleNoob(usedNames: Set<string>): void {
    const noobNames = [
      'NOOB_TRAFFIC',
      'BAD_LEADS',
      'ZERO_FTD',
      'WASTE_MONEY',
      'NO_CONVERT',
      'TRASH_ADS',
      'POOR_QUALITY',
      'USELESS_TRAFFIC',
      'FAKE_LEADS',
      'SPAM_SOURCE'
    ];

    const availableNoobNames = noobNames.filter(name => !usedNames.has(name));
    const noobName = availableNoobNames.length > 0 ?
      availableNoobNames[Math.floor(Math.random() * availableNoobNames.length)] :
      `NOOB_${Math.random().toString(36).substr(2, 3).toUpperCase()}`;

    usedNames.add(noobName);

    // –õ–∏–¥—ã –æ—Ç 6 –¥–æ 9 –¥–ª—è –Ω—É–±–∞
    const leads = this.getRandomInt(6, 9);

    const noobRequest: CreateTrafficStatRequest = {
      name: noobName,
      origin: null,
      successful_leads: leads,
      total_leads: leads,
      total_ftds: 0, // –í—Å–µ–≥–¥–∞ 0 –¥–ª—è –Ω—É–±–æ–≤
      late_total_ftds: 0,
      revenue: 0
    };

    this.trafficStatsService.addTrafficStat(noobRequest);
  }

  private getRandomInt(min: number, max: number): number {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  private getRandomFloat(min: number, max: number): number {
    return Math.random() * (max - min) + min;
  }

  onSubmit(): void {
    if (this.statForm.valid) {
      const formValue = this.statForm.value;
      const request: CreateTrafficStatRequest = {
        name: formValue.name,
        origin: formValue.origin || null,
        successful_leads: formValue.successful_leads,
        total_leads: formValue.successful_leads, // –í—Å–µ–≥–æ –ª–∏–¥–æ–≤ = —É—Å–ø–µ—à–Ω—ã–º –ª–∏–¥–∞–º
        total_ftds: formValue.total_ftds,
        late_total_ftds: 0, // –í—Å–µ–≥–¥–∞ 0
        revenue: 0 // –í—Å–µ–≥–¥–∞ 0
      };

      this.trafficStatsService.addTrafficStat(request);
      this.statForm.reset({
        name: '',
        origin: '',
        successful_leads: 0,
        total_ftds: 0
      });
      this.generateJson();
    }
  }

  addNoob(): void {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ –æ—Ç 6 –¥–æ 9
    const randomLeads = Math.floor(Math.random() * 4) + 6; // 6, 7, 8 –∏–ª–∏ 9

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –Ω—É–±–∞
    const noobNames = [
      'NOOB_TRAFFIC',
      'BAD_LEADS',
      'ZERO_FTD',
      'WASTE_MONEY',
      'NO_CONVERT',
      'TRASH_ADS',
      'POOR_QUALITY',
      'USELESS_TRAFFIC'
    ];
    const randomName = noobNames[Math.floor(Math.random() * noobNames.length)];

    const noobRequest: CreateTrafficStatRequest = {
      name: randomName,
      origin: null,
      successful_leads: randomLeads,
      total_leads: randomLeads,
      total_ftds: 0, // –í—Å–µ–≥–¥–∞ 0 –¥–ª—è –Ω—É–±–∞
      late_total_ftds: 0,
      revenue: 0
    };

    this.trafficStatsService.addTrafficStat(noobRequest);
    this.generateJson();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    alert(`ü§° –î–æ–±–∞–≤–ª–µ–Ω –Ω—É–± "${randomName}" —Å ${randomLeads} –ª–∏–¥–∞–º–∏ –∏ 0 FTD!`);
  }

  deleteStat(id: number): void {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è?')) {
      this.trafficStatsService.deleteTrafficStat(id);
      this.generateJson();
    }
  }

  generateJson(): void {
    this.generatedJson = this.trafficStatsService.generateJsonOutput();
  }

  async copyToClipboard(): Promise<void> {
    try {
      await navigator.clipboard.writeText(this.generatedJson);
      alert('JSON —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    }
  }

  clearAll(): void {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?')) {
      this.trafficStatsService.clearAllStats();
      this.generatedJson = '[]';
    }
  }

  importFromJson(): void {
    if (!this.importJson.trim()) {
      this.showImportMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ JSON –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞', false);
      return;
    }

    const success = this.trafficStatsService.importFromJson(this.importJson);

    if (success) {
      this.showImportMessage('JSON —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!', true);
      this.importJson = '';
      this.generateJson();
    } else {
      this.showImportMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ JSON. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.', false);
    }
  }

  updateStatField(statId: number, field: string, event: Event): void {
    const target = event.target as HTMLInputElement;
    let value: any = target.value;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (field === 'id' || field === 'successful_leads' || field === 'total_ftds') {
      const numValue = parseInt(value, 10);
      if (isNaN(numValue) || numValue < 0) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
        const currentStats = this.trafficStatsService.getCurrentStats();
        const currentStat = currentStats.find(s => s.id === statId);
        if (currentStat) {
          const fieldValue = currentStat[field as keyof TrafficStat];
          target.value = fieldValue !== null && fieldValue !== undefined ? fieldValue.toString() : '0';
        }
        return;
      }
      value = numValue;
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è ID
    if (field === 'id') {
      this.updateStatId(statId, value);
      return;
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updates: any = {};
    updates[field] = value;

    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω—è—é—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–µ –ª–∏–¥—ã, —Ç–æ total_leads —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
    if (field === 'successful_leads') {
      updates.total_leads = value;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const updatedStat = this.trafficStatsService.updateTrafficStat(statId, updates);

    if (updatedStat) {
      this.generateJson();
    } else {
      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const currentStats = this.trafficStatsService.getCurrentStats();
      const currentStat = currentStats.find(s => s.id === statId);
      if (currentStat) {
        const fieldValue = currentStat[field as keyof TrafficStat];
        target.value = fieldValue !== null && fieldValue !== undefined ? fieldValue.toString() : '0';
      }
    }
  }

  private updateStatId(oldId: number, newId: number): void {
    if (oldId === newId) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–≤—ã–π ID
    const currentStats = this.trafficStatsService.getCurrentStats();
    const idExists = currentStats.some(stat => stat.id === newId && stat.id !== oldId);

    if (idExists) {
      alert(`ID ${newId} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π ID.`);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const inputs = document.querySelectorAll('.id-input') as NodeListOf<HTMLInputElement>;
      inputs.forEach(input => {
        if (parseInt(input.value) === newId) {
          input.value = oldId.toString();
        }
      });
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º ID —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤ —Å–µ—Ä–≤–∏—Å–µ
    const success = this.trafficStatsService.updateStatId(oldId, newId);
    if (success) {
      this.generateJson();
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ID');
    }
  }

  trackByStat(index: number, stat: TrafficStat): number {
    return stat.id;
  }

  private showImportMessage(message: string, success: boolean): void {
    this.importMessage = message;
    this.importSuccess = success;

    setTimeout(() => {
      this.importMessage = '';
    }, 3000);
  }
}
